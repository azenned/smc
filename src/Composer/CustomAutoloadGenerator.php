<?php

namespace Blueflame\Composer;

use Composer\Autoload\AutoloadGenerator;
use Composer\Composer;
use Composer\EventDispatcher\EventDispatcher;
use Composer\IO\IOInterface;


final class  CustomAutoloadGenerator extends AutoloadGenerator {

  private $composer;

  public function __construct(EventDispatcher $eventDispatcher, IOInterface $io = NULL, Composer $composer) {
    parent::__construct($eventDispatcher, $io);
    $this->composer = $composer;
  }

  protected function getAutoloadFile($vendorPathToTargetDirCode, $suffix) {

    $lastChar = $vendorPathToTargetDirCode[strlen($vendorPathToTargetDirCode) - 1];
    if ("'" === $lastChar || '"' === $lastChar) {
      $vendorPathToTargetDirCode = substr($vendorPathToTargetDirCode, 0, -1) . '/autoload_real.php' . $lastChar;
    }
    else {
      $vendorPathToTargetDirCode .= " . '/autoload_real.php'";
    }

    $autoloadFile = <<<AUTOLOAD
<?php

// autoload.php @generated by SMC

require_once $vendorPathToTargetDirCode;
AUTOLOAD;

    $extra = $this->composer->getPackage()->getExtra();

    if (isset($extra['smc-debug']) && $extra['smc-debug']) {
      $autoloadFile .= "\nrequire_once __DIR__ . '/azenned/smc/src/debug.php'; \n";
    }
    if (isset($extra['smc-enable-apcu']) && $extra['smc-enable-apcu']) {
      $autoloadFile .= "\nrequire_once __DIR__ . '/azenned/smc/src/init.php'; \n";
    }
    $autoloadFile .= <<<AUTOLOAD

return ComposerAutoloaderInit$suffix::getLoader();

AUTOLOAD;

    return $autoloadFile;
  }

}
